import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {fetchCount} from './counterAPI';

const initialState = {}; //declare initial state

// 1. createAsyncThunks like 'assets/fetchData' with API calls from assetsAPI
// 2. code API calls that access the database (for now just access a mockStore declared with 'let')
// 3. DONE - add timer for debugging purpose (in order to check if pending and rejected case work)
// 4. reducers shall update the store, but their actions are only called by extra reducers
// 5. after initial fetch and any update, also the corresponding dynamic data (that doesn't rely on db) require reducers to update
// 4. extra reducers call reducers to update the store

export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const {increment, decrement, incrementByAmount} = counterSlice.actions; //export actions defined in 'reducers' for usage in app

export const selectCount = (state) => state.counter.value; //declare and export selector which returns (altered) state for usage in app

export default counterSlice.reducer; //export slice for setting up store

// declare thunk with sync and async logic by hand:
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};


